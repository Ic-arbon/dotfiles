---
description: 生成提交消息时使用
globs: 
alwaysApply: false
---
# 使用规范化提交消息规范生成提交消息。

提交消息应按以下结构组织：

```
<类型>[可选作用域]: <描述>

[可选正文]

[可选页脚]
```

提交包含以下结构元素，以向库的使用者传达意图：

- fix: 修复类型的提交用于修补代码库中的bug（对应语义化版本中的PATCH）。
- feat: 功能类型的提交用于向代码库引入新功能（对应语义化版本中的MINOR）。
- BREAKING CHANGE: 包含页脚BREAKING CHANGE:的提交，或在类型/作用域后附加!，表示引入破坏性API更改（对应语义化版本中的MAJOR）。BREAKING CHANGE可以是任何类型提交的一部分。
- 除了fix:和feat:之外，还允许其他类型，例如@commitlint/config-conventional（基于Angular约定）推荐build:、chore:、ci:、docs:、style:、refactor:、perf:、test:等。
- 除了BREAKING CHANGE: <描述>之外的页脚可能会提供，并遵循类似于git trailer格式的约定。
- 规范化提交规范并不强制要求额外的类型，它们在语义版本控制中没有隐含影响（除非包含BREAKING CHANGE）。可以为提交的类型提供一个作用域，以提供额外的上下文信息，并包含在括号中，例如，feat(parser): 添加解析数组的能力。

## 按内容分类提交规则

### 核心功能类型
- **feat**: 新增功能特性
  - `feat(websocket)`: WebSocket相关新功能
  - `feat(audio)`: 音频处理相关新功能
  - `feat(network)`: 网络管理相关新功能
  - `feat(storage)`: 存储管理相关新功能

- **fix**: 错误修复
  - `fix(dma)`: DMA相关错误修复
  - `fix(network)`: 网络连接问题修复
  - `fix(audio)`: 音频播放问题修复
  - `fix(memory)`: 内存管理问题修复

### 代码质量和维护类型
- **refactor**: 代码重构，不改变外部行为
  - `refactor(task)`: 任务模块重构
  - `refactor(api)`: API接口重构
  - `refactor(structure)`: 项目结构重构

- **perf**: 性能优化
  - `perf(audio)`: 音频处理性能优化
  - `perf(network)`: 网络传输性能优化
  - `perf(memory)`: 内存使用优化

- **style**: 代码格式化，不影响功能
  - `style(rust)`: Rust代码格式调整
  - `style(comment)`: 注释风格统一

### 配置和工具类型
- **build**: 构建系统和依赖管理
  - `build(cargo)`: Cargo配置更新
  - `build(deps)`: 依赖项版本更新
  - `build(target)`: 编译目标配置

- **ci**: 持续集成配置
  - `ci(github)`: GitHub Actions配置
  - `ci(test)`: 测试流程配置

- **chore**: 其他维护性工作
  - `chore(config)`: 配置文件更新
  - `chore(cleanup)`: 代码清理
  - `chore(gitignore)`: Git忽略规则更新

### 文档和测试类型
- **docs**: 文档更新
  - `docs(api)`: API文档更新
  - `docs(readme)`: README文档更新
  - `docs(dev)`: 开发者文档更新
  - `docs(arch)`: 架构设计文档

- **test**: 测试相关
  - `test(unit)`: 单元测试
  - `test(integration)`: 集成测试
  - `test(e2e)`: 端到端测试

### 提交内容分类建议

**按模块分类**：
- `websocket`: WebSocket通信模块
- `audio`: 音频输入输出模块
- `network`: 网络管理模块
- `storage`: 存储管理模块
- `task`: 任务调度模块
- `config`: 配置管理模块

**按文件类型分类**：
- `src`: 源代码变更
- `docs`: 文档变更
- `tests`: 测试代码变更
- `config`: 配置文件变更

**按影响范围分类**：
- `core`: 核心功能变更
- `api`: API接口变更
- `ui`: 用户界面变更
- `deps`: 依赖关系变更

### 规范详情

本文档中的关键词"必须"、"不得"、"必需"、"应"、"不应"、"应该"、"不应该"、"推荐"、"可以"和"可选"按照RFC 2119中的描述进行解释。

提交必须以类型为前缀，类型由名词组成，如feat、fix等，后面跟着可选的作用域、可选的!，以及必需的终止冒号和空格。

当提交向应用程序或库添加新功能时，必须使用类型feat。

当提交表示应用程序的bug修复时，必须使用类型fix。

在类型之后可以提供作用域。作用域必须由描述代码库某一部分的名词组成，并用括号括起来，例如，fix(parser):。

在类型/作用域前缀之后的冒号和空格之后必须立即跟着描述。描述是对代码更改的简短摘要，例如，fix: 当字符串中包含多个空格时出现的数组解析问题。

在简短描述之后可以提供更长的提交正文，提供有关代码更改的额外上下文信息。正文必须在描述后空一行开始。

提交正文是自由格式的，可以由任意数量的换行分隔段落组成。

在正文之后空一行可以提供一个或多个页脚。每个页脚必须由一个单词标记组成，后跟:<空格>或<空格># 分隔符，再跟一个字符串值（这受到git trailer约定的启发）。

页脚的标记必须使用-代替空白字符，例如，Acked-by（这有助于将页脚部分与多段落正文区分开）。BREAKING CHANGE也可以用作标记，这是一个例外。

页脚的值可以包含空格和换行，当观察到下一个有效的页脚标记/分隔符对时，解析必须终止。

破坏性更改必须在提交的类型/作用域前缀中，或作为页脚中的条目来指示。

如果包含在页脚中，破坏性更改必须由大写文本BREAKING CHANGE组成，后跟冒号、空格和描述，例如，BREAKING CHANGE: 环境变量现在优先于配置文件。

如果包含在类型/作用域前缀中，破坏性更改必须由!紧接在:之前指示。如果使用了!，可以从页脚部分省略BREAKING CHANGE:，并且提交描述应用于描述破坏性更改。

除了feat和fix之外的类型可以在提交消息中使用，例如，docs: 更新参考文档。

组成规范化提交的信息单元不得被实施者视为区分大小写，但BREAKING CHANGE例外，它必须是大写的。

当在页脚中用作标记时，BREAKING-CHANGE必须与BREAKING CHANGE同义。 