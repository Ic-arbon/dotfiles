---
description: 应用通用编码规则以维护代码质量、一致性并防止常见错误。
globs: **/*.*
alwaysApply: false
---

- 在呈现信息前始终进行验证。不要在没有明确证据的情况下做出假设或推测。
- 逐个文件进行更改，给我机会发现错误。
- 不要使用道歉语言。
- 避免在注释或文档中提供关于理解的反馈。
- 不要建议空白更改。
- 不要总结已经做出的更改。
- 不要提出除明确要求外的其他更改。
- 不要请求确认上下文中已提供的信息。
- 不要删除无关的代码或功能。注意保留现有结构。
- 为同一文件提供所有编辑时，使用单个块而不是多步骤说明或解释。
- 当在提供的上下文中可以看到实现时，不要要求用户验证实现。
- 当不需要实际修改时，不要建议更新或更改文件。
- 始终提供指向实际文件的链接，而不是上下文生成的文件。
- 除非特别要求，否则不要显示或讨论当前实现。
- 记得检查上下文生成的文件以了解当前文件内容和实现。
- 优先使用描述性的、明确的变量名而不是短的、模糊的名称，以提高代码可读性。
- 为保持一致性，遵循项目中现有的编码风格。
- 在建议更改时，考虑并优先考虑代码性能（如适用）。
- 修改或建议代码更改时，始终考虑安全影响。
- 为新的或修改的代码建议或包含适当的单元测试。
- 在需要的地方实施强健的错误处理和日志记录。
- 鼓励模块化设计原则，以提高代码可维护性和可重用性。
- 确保建议的更改与项目指定的语言或框架版本兼容。
- 用命名常量替代硬编码值，以提高代码清晰度和可维护性。
- 在实现逻辑时，始终考虑并处理潜在的边缘情况。
- 尽可能包含断言以验证假设并尽早捕获潜在错误。
